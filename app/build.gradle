apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    Properties versionProps = new Properties()
    def versionPropsFile = file("${project.rootDir}/version.properties")
    versionProps.load(new FileInputStream(versionPropsFile))
    def value = 0
    def runTasks = gradle.startParameter.taskNames
    if ('assemble' in runTasks || 'assembleRelease' in runTasks) {
        value = 1
    }
    def versionMajor = 1
    def versionPatch = versionProps['VERSION_PATCH'].toInteger() + 1
    def versionBuild = versionProps['VERSION_BUILD'].toInteger()
    def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

    if (versionPatch % 100 == 0) {
        versionBuild += 1
        versionPatch = 1
    }

    versionProps['VERSION_PATCH'] = versionPatch.toString()
    versionProps['VERSION_BUILD'] = versionBuild.toString()
    versionProps['VERSION_NUMBER'] = versionNumber.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    defaultConfig {
        applicationId "com.frestoinc.maildemo"
        versionCode versionNumber
        versionName "${versionMajor}.${versionPatch}.${versionBuild}(${versionNumber})"
        archivesBaseName = versionName
        minSdkVersion 26
        targetSdkVersion 29
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "${applicationId}-v${versionName}")
        multiDexEnabled true
        javaCompileOptions.annotationProcessorOptions {
            arguments['dagger.android.experimentalUseStringKeys'] = 'true'
        }
    }

    signingConfigs {

    }

    buildTypes {
        debug {
            minifyEnabled false
            resValue "string", "app_version", "${defaultConfig.versionName}${".debug"}"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            debuggable = false
            shrinkResources true
            resValue "string", "app_version", "${defaultConfig.versionName}"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    lintOptions {
        lintConfig file("${project.rootDir}/config/lint/lint.xml")
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    sourceSets {
        main.res.srcDirs += 'src/main/res_flags'
        main {
            java.srcDirs = ['src/main/java']
        }
    }
}


task publishRelease(type: GradleBuild) {
    tasks = ['clean', 'lint', 'pmd', 'checkstyle', 'dependencyCheckUpdate',
             'dependencyCheckAnalyze', 'assembleRelease', 'bundleRelease']
}

apply plugin: 'checkstyle'

checkstyle {
    toolVersion = '8.24'
}

task checkstyle(type: Checkstyle) {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    classpath = files()
    ignoreFailures = false
}

apply plugin: 'pmd'

task pmd(type: Pmd) {
    ruleSetFiles = files("${project.rootDir}/config/pmd/rulespmd.xml")
    ignoreFailures = false
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/model/**'

    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination file("$project.buildDir/outputs/pmd/pmd.html")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.work:work-runtime:2.3.3'
    implementation 'androidx.concurrent:concurrent-futures:1.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation('androidx.test.espresso:espresso-idling-resource:3.2.0') {
        exclude module: 'support-annotations'
    }
    testImplementation 'org.mockito:mockito-core:3.1.0'

    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'

    /**
     * Core library
     */
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2"

    /**
     * AndroidJUnitRunner and JUnit Rules
     */
    def androidx_version = "1.2.0"
    androidTestImplementation "androidx.test:core:$androidx_version"
    androidTestImplementation "androidx.test:runner:$androidx_version"
    androidTestImplementation "androidx.test:rules:$androidx_version"

    /**
     * Assertions
     */
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'
    androidTestImplementation 'com.google.truth:truth:1.0'

    /**
     * Espresso dependencies
     */
    def espresso_version = "3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espresso_version"

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    /** ****************************************
     ************   EXTERNAL LIBRARIES *********
     **************************************** */
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.64'
    implementation 'com.sun.mail:android-mail:1.5.5'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.unboundid:unboundid-ldapsdk:4.0.9'
    implementation 'org.jsoup:jsoup:1.12.1'

    /**
     *  Preference
     */
    def pref_version = "1.1.0"
    implementation "androidx.preference:preference:$pref_version"

    /**
     *  Materials
     */
    def materials_version = "1.1.0"
    implementation "com.google.android.material:material:$materials_version"

    /**
     *  Navigation
     */
    def nav_version = "2.2.1"
    implementation "androidx.navigation:navigation-runtime:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation "androidx.navigation:navigation-fragment:$nav_version"

    /**
     *  ROOM
     */
    def room_version = "2.2.4"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    /**
     *  RxAndroid
     */
    def rx_android_version = "2.1.1"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android_version"

    /**
     *  RxJava
     */
    def rx_java_version = "2.2.17"
    implementation "io.reactivex.rxjava2:rxjava:$rx_java_version"

    /**
     *  LiveData and ViewModel
     */
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    /**
     *  React Stream converter
     */
    def reactstream_version = "1.1.1"
    implementation "android.arch.lifecycle:reactivestreams:$reactstream_version"

    /**
     *  Dagger 2 Core and Android
     */
    def dagger_version = "2.24"
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"

    /**
     *  OkHttp3
     */
    def okhttp_version = "3.12.0"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    /**
     *  CWC-SafeRoom
     */
    def cwac_version = "1.2.1"
    implementation "com.commonsware.cwac:saferoom.x:$cwac_version"

    /**
     * Glide
     */
    def glide_version = "4.11.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    implementation "androidx.security:security-crypto:1.1.0-alpha01"
}
